// src/components/CharacterSelection.js
'use client';
import { useState } from 'react';
import Image from 'next/image';

// „Ç≠„É£„É©„ÇØ„Çø„Éº„Éá„Éº„ÇøÔºà‰æ°Ê†º„ÉªÁâπÂÖ∏ÊÉÖÂ†±ËøΩÂä†Ôºâ
const characterData = [
  {
    id: 1,
    name: '„ÅΩ„Çì„Åü',
    gifSrc: '/boy.gif',
    price: 0, // ÊúÄÂàù„ÅÆ„Ç≠„É£„É©„ÇØ„Çø„Éº„ÅØÁÑ°Êñô
    bonus: 'Âü∫Êú¨„Ç≠„É£„É©„ÇØ„Çø„Éº',
    feature: 'ÊàêÈï∑ÈÄüÂ∫¶ Ê®ôÊ∫ñ'
  },
  {
    id: 2,
    name: '„Éù„ÉÅ',
    gifSrc: '/dog.gif',
    price: 500,
    bonus: 'Ê∞¥„ÇÑ„ÇäÂäπÁéá+10%',
    feature: 'Ê∞¥„ÅÆÊ∂àË≤ªÈáè‰ΩéÊ∏õ'
  },
  {
    id: 3,
    name: '„Åµ„Çè„Çä',
    gifSrc: '/camp.gif',
    price: 1000,
    bonus: 'ÊàêÈï∑ÈÄüÂ∫¶+15%',
    feature: 'ÂèéÁ©´ÊôÇÈñìÁü≠Á∏Æ'
  },
  {
    id: 4,
    name: '„Å§„Å∂„Å§„Å∂',
    gifSrc: '/characters/character4.gif',
    price: 2000,
    bonus: 'ÂèéÁ©´Èáè+20%',
    feature: 'ÁâπÂà•„Ç¢„Ç§„ÉÜ„É†ÂÖ•ÊâãÁ¢∫ÁéáUP'
  },
];

const CharacterSelection = ({ onSelectCharacter, coins = 0, onClose }) => {
  const [currentCharacter, setCurrentCharacter] = useState(characterData[0]);
  const [showModal, setShowModal] = useState(false);
  const [selectedForPreview, setSelectedForPreview] = useState(null);
  const [errorMessage, setErrorMessage] = useState('');

  // „Ç≠„É£„É©„ÇØ„Çø„Éº„Çí„Çø„ÉÉ„Éó„Åó„ÅüÊôÇ„ÅÆÂá¶ÁêÜ
  const handleCharacterClick = () => {
    setShowModal(true);
    setErrorMessage('');
  };

  // „Ç≠„É£„É©„ÇØ„Çø„ÉºÈÅ∏ÊäûÊôÇ„ÅÆÂá¶ÁêÜ
  const selectCharacter = (character) => {
    // „Ç≥„Ç§„É≥„ÅåË∂≥„Çä„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
    if (character.price > coins && character.id !== currentCharacter.id) {
      setErrorMessage(`„Ç≥„Ç§„É≥„ÅåË∂≥„Çä„Åæ„Åõ„ÇìÔºà„ÅÇ„Å®${character.price - coins}„Ç≥„Ç§„É≥ÂøÖË¶ÅÔºâ`);
      setTimeout(() => setErrorMessage(''), 3000);
      return;
    }
    
    setCurrentCharacter(character);
    setShowModal(false);
    
    // Ë¶™„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Å´ÈÅ∏Êäû„Åó„Åü„Ç≠„É£„É©„ÇØ„Çø„Éº„ÇíÈÄöÁü•
    if (onSelectCharacter) {
      onSelectCharacter(character);
    }
  };

  const closeModal = () => {
    setShowModal(false);
    setSelectedForPreview(null);
  };

  const previewCharacter = (character) => {
    setSelectedForPreview(character);
  };

  return (
    <>
      {/* „É°„Ç§„É≥„Ç≠„É£„É©„ÇØ„Çø„ÉºË°®Á§∫ (Â∑¶‰∏≠Â§Æ„Å´ÈÖçÁΩÆ) */}
      <div 
        className="absolute left-1 top-[233px] cursor-pointer"
        onClick={handleCharacterClick}
      >
        <Image
          src={currentCharacter.gifSrc}
          alt={currentCharacter.name}
          width={100}
          height={100}
          priority
        />
        
        {/* „Ç≠„É£„É©„ÇØ„Çø„ÉºÂ§âÊõ¥„Éú„Çø„É≥ */}
        <div className="absolute bottom-0 right-0 bg-green-500 text-white text-xs font-bold rounded-full w-6 h-6 flex items-center justify-center shadow-md border border-white">
          +
        </div>
      </div>
      
      {/* ‰∏ã„Åã„ÇâÂá∫„Å¶„Åè„Çã„Ç≠„É£„É©„ÇØ„Çø„ÉºÈÅ∏Êäû„É¢„Éº„ÉÄ„É´ */}
      {showModal && (
        <div className="fixed inset-0 z-50 flex items-end justify-center bg-black bg-opacity-50 transition-opacity">
          <div className="bg-white rounded-t-2xl p-4 w-full max-w-md animate-slide-up max-h-[80vh] overflow-y-auto">
            {/* „É¢„Éº„ÉÄ„É´„Éò„ÉÉ„ÉÄ„Éº */}
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-bold text-gray-800">„Ç≠„É£„É©„ÇØ„Çø„ÉºÈÅ∏Êäû</h3>
              <button 
                onClick={closeModal}
                className="text-gray-500 hover:text-gray-700"
              >
                ‚úï
              </button>
            </div>
            
            {/* „Ç≥„Ç§„É≥Ë°®Á§∫ */}
            <div className="bg-yellow-50 rounded-lg p-2 mb-4 flex justify-between items-center">
              <span className="font-medium">ÊâÄÊåÅ„Ç≥„Ç§„É≥</span>
              <span className="text-lg font-bold text-yellow-600 flex items-center">
                <span className="mr-1">üí∞</span>{coins}
              </span>
            </div>
            
            {/* „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏ */}
            {errorMessage && (
              <div className="mb-4 text-center text-sm font-medium text-red-500 bg-red-50 py-2 px-4 rounded-lg">
                {errorMessage}
              </div>
            )}
            
            {/* „Éó„É¨„Éì„É•„ÉºË°®Á§∫ */}
            {selectedForPreview && (
              <div className="bg-gray-50 rounded-lg p-3 mb-4 flex flex-col items-center">
                <Image
                  src={selectedForPreview.gifSrc}
                  alt={selectedForPreview.name}
                  width={100}
                  height={100}
                />
                <h4 className="text-lg font-bold mt-2">{selectedForPreview.name}</h4>
                <div className="mt-1 text-sm text-gray-600">{selectedForPreview.feature}</div>
                
                <button
                  onClick={() => selectCharacter(selectedForPreview)}
                  className={`mt-3 w-full py-2 px-4 rounded-lg font-bold text-white ${
                    selectedForPreview.price > coins && selectedForPreview.id !== currentCharacter.id
                      ? 'bg-gray-400'
                      : 'bg-green-500 hover:bg-green-600'
                  }`}
                  disabled={selectedForPreview.price > coins && selectedForPreview.id !== currentCharacter.id}
                >
                  {selectedForPreview.id === currentCharacter.id 
                    ? 'ÈÅ∏Êäû‰∏≠' 
                    : selectedForPreview.price === 0 
                      ? 'ÁÑ°ÊñôÂÖ•Êâã' 
                      : `${selectedForPreview.price}„Ç≥„Ç§„É≥„ÅßË≥ºÂÖ•`}
                </button>
              </div>
            )}
            
            {/* „Ç≠„É£„É©„ÇØ„Çø„Éº„É™„Çπ„Éà */}
            <div className="grid grid-cols-2 gap-3">
              {characterData.map((character) => (
                <div 
                  key={character.id}
                  className={`bg-gray-50 rounded-lg p-2 cursor-pointer transition-all duration-200 hover:bg-gray-100 border-2 ${
                    currentCharacter.id === character.id 
                      ? 'border-green-500' 
                      : character.price > coins 
                        ? 'border-gray-200 opacity-70' 
                        : 'border-transparent'
                  }`}
                  onClick={() => previewCharacter(character)}
                >
                  <div className="flex flex-col items-center">
                    <div className="relative">
                      <Image
                        src={character.gifSrc}
                        alt={character.name}
                        width={60}
                        height={60}
                      />
                      {currentCharacter.id === character.id && (
                        <div className="absolute -top-1 -right-1 bg-green-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center border border-white">
                          ‚úì
                        </div>
                      )}
                    </div>
                    <h4 className="mt-1 font-bold text-gray-800">{character.name}</h4>
                    <div className="mt-1 bg-yellow-100 text-yellow-800 text-xs font-medium px-2 py-0.5 rounded-full flex items-center">
                      {character.price > 0 ? `üí∞ ${character.price}` : 'ÁÑ°Êñô'}
                    </div>
                    <div className="mt-1 text-xs text-gray-500 text-center">
                      {character.bonus}
                    </div>
                  </div>
                </div>
              ))}
            </div>
            
            {!selectedForPreview && (
              <div className="mt-4 text-center text-sm text-gray-500">
                „Ç≠„É£„É©„ÇØ„Çø„Éº„ÇíÈÅ∏Êäû„Åô„Çã„Å®„Éó„É¨„Éì„É•„Éº„ÅåË°®Á§∫„Åï„Çå„Åæ„Åô
              </div>
            )}
          </div>
        </div>
      )}
    </>
  );
};

export default CharacterSelection;